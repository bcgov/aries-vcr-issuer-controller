#!/bin/bash

# getDockerHost; for details refer to https://github.com/bcgov/DITP-DevOps/tree/main/code/snippets#getdockerhost
. /dev/stdin <<<"$(cat <(curl -s --raw https://raw.githubusercontent.com/bcgov/DITP-DevOps/main/code/snippets/getDockerHost))" 
export DOCKERHOST=$(getDockerHost)
export MSYS_NO_PATHCONV=1
set -e

SCRIPT_HOME="$( cd "$( dirname "$0" )" && pwd )"

export CONTROLLER_TIMEOUT="${CONTROLLER_TIMEOUT:-120}"
export CONTROLLER_URL_CONFIG="${CONTROLLER_URL_CONFIG}"

# =================================================================================================================
# Usage:
# -----------------------------------------------------------------------------------------------------------------

usage() {
  cat <<-EOF

  Usage: $0 [command] [options]

  Commands:

  build - Build the docker images for the project.
          You need to do this first, since the builds require
          a combination of Docker images.

  up  - Creates the application container from the built images
        and starts the services based on the docker-compose.yml file.
        You can include a '--wait' parameter which will wait until the ledger is active
        When using the '--logs' option, use ctrl-c to exit logging. Use "down" or "stop" to stop the run.
        Examples:
        $0 start
        $0 start --logs
        $0 start --wait --logs

  start - Same as up

  logs - Display the logs from the docker compose run (ctrl-c to exit).

  stop - Stops the services.  This is a non-destructive process.  The volumes and containers
         are not deleted so they will be reused the next time you run start.

  down - Brings down the services and removes the volumes (storage) and containers.
  rm - Same as down

EOF
exit 1
}

# -----------------------------------------------------------------------------------------------------------------
# Default Settings:
# -----------------------------------------------------------------------------------------------------------------

DEFAULT_CONTAINERS=""

# -----------------------------------------------------------------------------------------------------------------
# Functions:
# -----------------------------------------------------------------------------------------------------------------

configureEnvironment () {

  if [ -f .env ]; then
    while read line; do
      if [[ ! "$line" =~ ^\# ]] && [[ "$line" =~ .*= ]]; then
        export $line
      fi
    done < .env
  fi

  for arg in $@; do
    case "$arg" in
      *=*)
        export ${arg}
        ;;
      --logs)
        TAIL_LOGS=1
        ;;
      --wait)
        WAIT_FOR_CONTROLLER=1
        ;;
    esac
  done

  # bcreg-controller
  export CONTROLLER_PORT=5000
  export EXPOSED_CONTROLLER_PORT=5010
  export WEB_HTTP_PORT=5001
  export WEB_HOST_PORT=8081
  export COMPOSE_PROJECT_NAME=myorg
  export COMPOSE_PROJECT_NAME=${COMPOSE_PROJECT_NAME:-"myorg"}
  export LEDGER_URL=${LEDGER_URL-http://$DOCKERHOST:9000}
  export APPLICATION_URL=${APPLICATION_URL-http://localhost:${WEB_HTTP_PORT:-5001}}
  export ENDPOINT_URL=http://${ENDPOINT_HOST-$DOCKERHOST:${WEB_HTTP_PORT:-5001}}

  export RECORD_TIMINGS=${RECORD_TIMINGS:-false}
  export TRACE_EVENTS=${TRACE_EVENTS:-false}
  export TRACE_TARGET=${TRACE_TARGET:-log}
  # set this one manually to trace a percentage of issued credential exchanges
  export TRACE_MSG_PCT=${TRACE_MSG_PCT:-0}
  export ACK_ERROR_PCT=${ACK_ERROR_PCT:-0}

  # traction settings
  export TRACTION_INNKEEPER_TENANT_ID=innkeeper
  export TRACTION_INNKEEPER_WALLET_NAME=traction_innkeeper
  export TRACTION_INNKEEPER_WALLET_KEY=change-me
  export TRACTION_INNKEEPER_PRINT_KEY=true
  export TRACTION_INNKEEPER_PRINT_TOKEN=true
  export TRACTION_INNKEEPER_RESERVATION_EXPIRY_MINUTES=480

  export TRACTION_MULTITENANT_MANAGER_CLASS=traction_plugins.multitenant_provider.v1_0.manager.AskarMultitokenMultitenantManager
  export TRACTION_MULTITENANT_ALWAYS_CHECK_PROVIDED_WALLET_KEY=true
  export TRACTION_MULTITENANT_ERRORS_UNNNEEDED_KEY=false
  export TRACTION_MULTITENANT_TOKENEXPIRY_UNITS=days
  export TRACTION_MULTITENANT_TOKENEXPIRY_AMOUNT=1

  export JWT_SECRET=very-secret-secret

  # myorg-agent
  export AGENT_ADMIN_PORT=8034
  export TOB_AGENT_ADMIN_PORT=8024
  export WEBHOOK_PORT=5000
  #export INDY_WALLET_DID=...
  export AGENT_HTTP_IN_PORT=8031
  export AGENT_WS_IN_PORT=8033
  export WEBHOOK_HOST=http://myorg-controller:${WEBHOOK_PORT}
  export AGENT_NAME="myorg-agent"
  export AGENT_ENDPOINT=${AGENT_ENDPOINT:-http://$DOCKERHOST:$AGENT_HTTP_IN_PORT}
  export AGENT_ADMIN_API_KEY=${AGENT_ADMIN_API_KEY}
  export AGENT_ADMIN_MODE="admin-insecure-mode"
  if [ ! -z "${AGENT_ADMIN_API_KEY}" ]; then
    AGENT_ADMIN_MODE="admin-api-key ${AGENT_ADMIN_API_KEY}"
  fi
  export AGENT_TIMING_MODE=""
  if [ "${RECORD_TIMINGS}" = "true" ]; then
    AGENT_TIMING_MODE="--timing"
  fi
  export AGENT_TRACE_MODE=""
  if [ "${TRACE_EVENTS}" = "true" ]; then
    AGENT_TRACE_MODE="--trace"
  fi

  # wallet-db
  export POSTGRESQL_DATABASE="THE_ORG_BOOK"
  export POSTGRESQL_USER="DB_USER"
  export POSTGRESQL_PASSWORD="DB_PASSWORD"
  export WALLET_TYPE="postgres_storage"
  export WALLET_ENCRYPTION_KEY="key"
  export POSTGRESQL_WALLET_HOST="myorg-wallet-db"
  export POSTGRESQL_WALLET_PORT="5432"
  export POSTGRESQL_ADMIN_USER="postgres"
  export POSTGRESQL_ADMIN_PASSWORD="mysecretpassword"
  export WALLET_SEED_VONX=$(echo `openssl rand -base64 40 | tr -d /=+ | cut -c -32`)
  #export WALLET_SEED_VONX=${WALLET_SEED_VONX:-"myorg_issuer_0000000000000000001"}
  echo "starting with seed ${WALLET_SEED_VONX}"

  # myorg-pipeline
  export COMPOSE_PROJECT_NAME=${COMPOSE_PROJECT_NAME:-"vonx"}
  export LEDGER_URL=${LEDGER_URL-http://$DOCKERHOST:9000}
  export APPLICATION_URL=${APPLICATION_URL-http://localhost:${WEB_HTTP_PORT:-5000}}
  export ENDPOINT_URL=http://${ENDPOINT_HOST-$DOCKERHOST:${WEB_HTTP_PORT:-5001}}
  export VONX_API_URL=http://myorg-controller:${WEBHOOK_PORT}

  # myorg-controller
  # specify this as anything other than "true" to force manual connection to the TOB agent
  export REGISTER_TOB_CONNECTION=${REGISTER_TOB_CONNECTION:-true}
  if [  "${REGISTER_TOB_CONNECTION}" = "true"  ]; then
    export TOB_AGENT_ADMIN_URL=${TOB_AGENT_ADMIN_URL:-http://${DOCKERHOST}:${TOB_AGENT_ADMIN_PORT}} 
  fi
  export TOB_CONNECTION_NAME=${TOB_CONNECTION_NAME:-vcr-agent} 
  export TOB_ADMIN_API_KEY=${TOB_ADMIN_API_KEY:-R2D2HfPM5Zwd69IjclQiuFmcMV6}
  export CONTROLLER_API_KEY=${CONTROLLER_API_KEY}
  export OIDC_JWKS_URI=${OIDC_JWKS_URI}
  if [ ! -z "${CONTROLLER_API_KEY}" ]; then
    export WEBHOOK_URL=${WEBHOOK_HOST}/api/agentcb#${CONTROLLER_API_KEY}
  else
    export WEBHOOK_URL=${WEBHOOK_HOST}/api/agentcb
  fi
}

getStartupParams() {
  CONTAINERS=""
  ARGS=""
  if [ "$COMMAND" == "start" ]; then
    ARGS+="--force-recreate"
  fi

  for arg in $@; do
    case "$arg" in
      *=*)
        # Skip it
        ;;
      --logs)
        # Skip it
        ;;
      --wait)
        # Skip it
        ;;
      -*)
        ARGS+=" $arg";;
      *)
        CONTAINERS+=" $arg";;
    esac
  done

  if [ -z "$CONTAINERS" ]; then
    CONTAINERS="$DEFAULT_CONTAINERS"
  fi

  echo ${ARGS} ${CONTAINERS}
}

function logs() {
  (
    local OPTIND
    local unset _force
    local unset no_tail
    while getopts ":f-:" FLAG; do
      case $FLAG in
        f ) local _force=1 ;;
        - ) 
            case ${OPTARG} in
                "no-tail"*) no_tail=1
              ;;
            esac
      esac
    done
    shift $((OPTIND-1))

    log_args=()
    (( no_tail != 1 )) && log_args+=( '-f' )
    if [ ! -z "${TAIL_LOGS}" ] || [ ! -z "${_force}" ]; then
      docker-compose \
        --log-level ERROR logs \
         "${log_args[@]}" "$@"
    fi
  )
}

pingIssuerController(){
  issuer_controller_url=${1}

  # ping ledger web browser for genesis txns
  local rtnCd=$(curl -s --write-out '%{http_code}' --output /dev/null ${issuer_controller_url}/readiness)
  if (( ${rtnCd} == 200 )); then
    return 0
  else
    return 1
  fi
}

function wait_for_issuer_controller() {
  (
    # if flag is set, wait for ledger to activate before continuing
    local rtnCd=0
    if [ ! -z "${WAIT_FOR_CONTROLLER}" ]; then
      # Wait for ledger server to start ...
      local startTime=${SECONDS}
      # use global LEDGER_URL
      local ISSUER_CONTROLLER_URL="${CONTROLLER_URL_CONFIG:-http://localhost:5000}"
      printf "waiting for ISSUER CONTROLLER to start"
      while ! pingIssuerController "$ISSUER_CONTROLLER_URL"; do
        printf "."
        local duration=$(($SECONDS - $startTime))
        if (( ${duration} >= ${CONTROLLER_TIMEOUT} )); then
          echo "\nThe ISSUER CONTROLLER service failed to start within ${duration} seconds.\n"
          docker-compose logs
          rtnCd=1
          break
        fi
        sleep 1
      done
    fi
    return ${rtnCd}
  )
}

build() {
  # Build all containers in the docker-compose file
  echo -e "\nBuilding containers ..."
  echo docker-compose build $@
  docker-compose build $@
}

deleteVolumes() {
  _projectName=${COMPOSE_PROJECT_NAME:-docker}

  echo "Stopping and removing any running containers ..."
  docker-compose down -v
}

# =================================================================================================================

pushd ${SCRIPT_HOME} >/dev/null
COMMAND=$1
shift || true

case "$COMMAND" in
  start|up)
    _startupParams=$(getStartupParams $@)
    configureEnvironment $@
    docker-compose up -d ${_startupParams}
    wait_for_issuer_controller
    logs
    ;;
  logs)
    configureEnvironment $@
    docker-compose logs -f
    ;;
  stop)
    configureEnvironment $@
    docker-compose stop
    ;;
  rm|down)
    configureEnvironment $@
    deleteVolumes
    ;;
  build)
    _startupParams=$(getStartupParams $@)
    configureEnvironment $@
    build ${_startupParams}
    ;;
  *)
    usage
esac

popd >/dev/null
